generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tasks         Task[]
  projects      Project[]
  epics         Epic[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id          String  @id @default(cuid())
  name        String
  description String?
  status      Status  @default(TODO)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  @@index([userId])
  @@index([projectId])
}

model Project {
  id          String  @id @default(cuid())
  name        String
  description String?
  tasks       Task[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  epic   Epic   @relation(fields: [epicId], references: [id], onDelete: Cascade)
  epicId String

  @@unique([name, userId])
  @@index([userId])
  @@index([epicId])
}

model Epic {
  id          String  @id @default(cuid())
  name        String
  description String?

  projects Project[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([name, userId])
  @@index([userId])
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
}
